{"version":3,"file":"index.umd.js","sources":["../src/utils.ts","../src/core.ts"],"sourcesContent":["/** @module utils */\r\nimport {\r\n  AttributeRule,\r\n  TagRule,\r\n  presetTestResult,\r\n  MarkedElement,\r\n  HTMLParser,\r\n} from './types';\r\n\r\n/**\r\n * Setup default parser\r\n */\r\nexport const getDefaultParser = (): HTMLParser => {\r\n  if (globalThis.DOMParser === undefined) {\r\n    throw 'globalThis.DOMParser is not defined!\\nIt seems that you use purify-html in node environment.\\nFor node environment you need to add HTML parser by yourself.\\nSee https://github.com/oleksandr-dukhovnyy/purify-html?tab=readme-ov-file#node-js for details.';\r\n  }\r\n\r\n  const elem: Element = new DOMParser()\r\n    .parseFromString('', 'text/html')\r\n    .querySelector('body');\r\n\r\n  return {\r\n    parse(string: string): Element {\r\n      elem.innerHTML = string;\r\n      return elem;\r\n    },\r\n    stringify(elem: Element): string {\r\n      return elem.innerHTML;\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Remove attribute value, but dont remove attribute.\r\n */\r\nexport const removeAttributeValue = (node: Element, attributeName: string) =>\r\n  node.setAttribute(attributeName, '');\r\n\r\n/**\r\n * Remove all comments in childNodes.\r\n * Comments in child nodes are not removed\r\n *\r\n * @param {HTMLElement} node\r\n * @returns {undefined | false} undefined - ok, false - error\r\n */\r\nexport const removeComments = (node: Element): undefined | false => {\r\n  if ('childNodes' in node) {\r\n    for (\r\n      let childIndex = node.childNodes.length - 1;\r\n      childIndex > 0;\r\n      childIndex--\r\n    ) {\r\n      if (node.childNodes[childIndex].nodeType === 8) {\r\n        node.childNodes[childIndex].remove();\r\n      }\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * @param {Element} node\r\n * @returns {Element[]} array of node childs sorted by child's max deep\r\n */\r\nexport const getSortedByMaxChildDeep = (() => {\r\n  const markDeep = (node: MarkedElement, d = 0): number | undefined => {\r\n    node._d = d;\r\n\r\n    if (node.children.length) {\r\n      [...node.children].forEach(n => markDeep(n, d + 1));\r\n    } else {\r\n      return d;\r\n    }\r\n  };\r\n\r\n  return (node: Element): Element[] => {\r\n    markDeep(node);\r\n\r\n    return [...node.querySelectorAll('*')]\r\n      .sort((a: MarkedElement, b: MarkedElement) => b._d - a._d)\r\n      .map((el: MarkedElement): Element => {\r\n        delete el._d;\r\n\r\n        return el;\r\n      });\r\n  };\r\n})();\r\n\r\n/**\r\n * Normalize a TagRule.\r\n */\r\nexport const transformAttributes = (rule: TagRule): TagRule => {\r\n  const res: AttributeRule[] = [];\r\n\r\n  if (!Object.prototype.hasOwnProperty.call(rule, 'attributes')) {\r\n    rule.attributes = [];\r\n  }\r\n\r\n  rule.attributes.forEach(attr => {\r\n    switch (typeof attr) {\r\n      case 'string':\r\n        res.push({ name: attr });\r\n        break;\r\n\r\n      case 'object':\r\n        res.push(attr);\r\n        break;\r\n    }\r\n  });\r\n\r\n  rule.attributes = res;\r\n\r\n  return rule;\r\n};\r\n\r\n/**\r\n * Safely get link with try...catch.\r\n */\r\nexport const safelyGetLink = (str: string): URL | null => {\r\n  try {\r\n    return new URL(str);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Add prefix by check\r\n *\r\n * @returns {string} if check returns true - prefix + str, else str\r\n */\r\nexport const addPrefix = (str: string, check: RegExp, prefix: string) =>\r\n  check.test(str) ? str : prefix + str;\r\n\r\n/**\r\n * Deep clone an object\r\n */\r\nexport const deepClone = <T>(item: T): T => {\r\n  if (typeof item === 'string') return item;\r\n  if (Array.isArray(item))\r\n    return item.map(arrItem => deepClone(arrItem)) as unknown as T;\r\n\r\n  if (typeof item === 'object' && item !== null) {\r\n    const res: Record<string, unknown> = {};\r\n\r\n    for (const key in item) {\r\n      if (item[key] instanceof RegExp) {\r\n        res[key] = item[key];\r\n      } else if (typeof item[key] === 'object') {\r\n        res[key] = deepClone(item[key]);\r\n      } else {\r\n        res[key] = item[key];\r\n      }\r\n    }\r\n\r\n    return res as T;\r\n  }\r\n\r\n  return item;\r\n};\r\n\r\n/**\r\n * Create clone of config for safe mutations\r\n *\r\n * @param {string[] | TagRule[]} config\r\n * @returns {string[] | TagRule[]} cloned config\r\n */\r\nexport const copyConfig = (\r\n  config: (string | TagRule)[]\r\n): (string | TagRule)[] => config.map(deepClone);\r\n\r\n/**\r\n * @typedef PresetCheckResult\r\n * @type {object}\r\n * @property {boolean} remove if true - attribute value is incorrect\r\n */\r\n\r\n/**\r\n * Interface for presets.\r\n *\r\n * @interface\r\n */\r\nexport const valuesPresets = {\r\n  /**\r\n   * Check is str a correct link\r\n   */\r\n  '%correct-link%'(str: string): presetTestResult {\r\n    console.warn(\r\n      'Default presets is deprecated and will be removed in 2.0.0. See release notes for v1.5.4'\r\n    );\r\n\r\n    return {\r\n      remove: safelyGetLink(str) === null,\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has HTTP protocol\r\n   */\r\n  '%http-link%'(str: string): presetTestResult {\r\n    console.warn(\r\n      'Default presets is deprecated and will be removed in 2.0.0. See release notes for v1.5.4'\r\n    );\r\n\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || url.protocol !== 'http:',\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has HTTPS protocol\r\n   */\r\n  '%https-link%'(str: string): presetTestResult {\r\n    console.warn(\r\n      'Default presets is deprecated and will be removed in 2.0.0. See release notes for v1.5.4'\r\n    );\r\n\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || url.protocol !== 'https:',\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has FTP protocol\r\n   */\r\n  '%ftp-link%'(str: string): presetTestResult {\r\n    console.warn(\r\n      'Default presets is deprecated and will be removed in 2.0.0. See release notes for v1.5.4'\r\n    );\r\n\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || url.protocol !== 'ftp:',\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has HTTPS protocol and does not have a params\r\n   *\r\n   * @function\r\n   */\r\n  '%https-link-without-search-params%'(str: string): presetTestResult {\r\n    console.warn(\r\n      'Default presets is deprecated and will be removed in 2.0.0. See release notes for v1.5.4'\r\n    );\r\n\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || url.search !== '' || url.protocol !== 'https:',\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has HTTP protocol and does not have a params\r\n   */\r\n  '%http-link-without-search-params%'(str: string): presetTestResult {\r\n    console.warn(\r\n      'Default presets is deprecated and will be removed in 2.0.0. See release notes for v1.5.4'\r\n    );\r\n\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || url.search !== '' || url.protocol !== 'http:',\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has same origin with current `location.origin`\r\n   */\r\n  '%same-origin%'(str: string): presetTestResult {\r\n    console.warn(\r\n      'Default presets is deprecated and will be removed in 2.0.0. See release notes for v1.5.4'\r\n    );\r\n\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || globalThis.location.origin !== url.origin,\r\n    };\r\n  },\r\n};\r\n","/** @module core */\r\nimport { TagRule, AttributeRule, HTMLParser } from './types';\r\n\r\nimport {\r\n  removeAttributeValue,\r\n  transformAttributes,\r\n  valuesPresets,\r\n  getSortedByMaxChildDeep,\r\n  copyConfig,\r\n  removeComments,\r\n  getDefaultParser,\r\n} from './utils';\r\n\r\nlet parser: HTMLParser | undefined;\r\n\r\n/**\r\n * Purify instance.\r\n */\r\nexport class PurifyHTML {\r\n  /**\r\n   * Create PurifyHTML instance\r\n   */\r\n\r\n  /**\r\n   * Is need to remove comments in root and in all nodes by default\r\n   */\r\n  protected removeComments = true;\r\n  protected allowedTags: { [key: string]: TagRule } = {};\r\n  protected whiteList: string[];\r\n\r\n  constructor(allowedTags: TagRule[] | string[] = []) {\r\n    // setup default parser\r\n    if (!parser) {\r\n      parser = getDefaultParser();\r\n    }\r\n\r\n    /**\r\n     * Copy and compile a rules\r\n     */\r\n    this.allowedTags = copyConfig(allowedTags).reduce(\r\n      (acc: object, curr: TagRule | string) => {\r\n        switch (typeof curr) {\r\n          case 'string': {\r\n            if (curr === '#comments') {\r\n              this.removeComments = false;\r\n            } else {\r\n              acc[curr] = Object.assign(acc[curr] || {}, {});\r\n            }\r\n\r\n            break;\r\n          }\r\n          case 'object':\r\n            acc[curr.name] = Object.assign(\r\n              acc[curr.name] || {},\r\n              transformAttributes(curr)\r\n            );\r\n        }\r\n\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n\r\n    /**\r\n     * Copy and compile a rules\r\n     */\r\n    this.whiteList = Object.keys(this.allowedTags);\r\n\r\n    /**\r\n     * Bind context for method sanitize\r\n     */\r\n    this.sanitize.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Sanitize a string.\r\n   * @param {string} str to needs to sanitize.\r\n   * @return {string} A string cleared according to the rules from this.allowedTags.\r\n   */\r\n  public sanitize(str: string): string {\r\n    const wrapper: Element = parser.parse(str);\r\n\r\n    if (this.removeComments) {\r\n      removeComments(wrapper);\r\n    }\r\n\r\n    const allItems: Element[] = getSortedByMaxChildDeep(wrapper);\r\n\r\n    allItems.forEach((tag: Element) => {\r\n      const name = tag.tagName.toLowerCase();\r\n\r\n      if (this.whiteList.includes(name)) {\r\n        const tagConfig: TagRule = this.allowedTags[name];\r\n\r\n        if (this.removeComments && tagConfig.dontRemoveComments !== true) {\r\n          removeComments(tag);\r\n        }\r\n\r\n        if (\r\n          Object.prototype.hasOwnProperty.call(tagConfig, 'attributes') &&\r\n          tagConfig.attributes.length > 0\r\n        ) {\r\n          const deleteList: string[] = [];\r\n          const clearList: string[] = [];\r\n\r\n          for (let i = 0; i < tag.attributes.length; i++) {\r\n            const attr: Attr = tag.attributes[i];\r\n\r\n            // get attribute rules\r\n            const attributeRules = tagConfig.attributes.find(\r\n              (attrRule: AttributeRule) => attrRule.name === attr.name\r\n            );\r\n\r\n            if (!attributeRules) {\r\n              // if rules not defined\r\n              deleteList.push(attr.name);\r\n            } else if (\r\n              Object.prototype.hasOwnProperty.call(attributeRules, 'value')\r\n            ) {\r\n              // if rules defined\r\n              if (typeof attributeRules.value === 'string') {\r\n                if (attr.value !== attributeRules.value) {\r\n                  // if rules is string\r\n                  clearList.push(attr.name);\r\n                }\r\n              } else if (typeof attributeRules.value === 'function') {\r\n                if (!attributeRules.value(attr.value)) {\r\n                  clearList.push(attr.name);\r\n                }\r\n              } else if (attributeRules.value instanceof RegExp) {\r\n                // if rules is regexp\r\n                if (!attributeRules.value.test(attr.value)) {\r\n                  clearList.push(attr.name);\r\n                }\r\n              } else if (Array.isArray(attributeRules.value)) {\r\n                // if rules is an array (an array of strings - valid values)\r\n                if (!attributeRules.value.includes(attr.value)) {\r\n                  clearList.push(attr.name);\r\n                }\r\n              } else if (typeof attributeRules.value === 'object') {\r\n                if (\r\n                  Object.prototype.hasOwnProperty.call(\r\n                    attributeRules.value,\r\n                    'preset'\r\n                  )\r\n                ) {\r\n                  // if rules is preset\r\n\r\n                  if (\r\n                    Object.prototype.hasOwnProperty.call(\r\n                      valuesPresets,\r\n                      attributeRules.value.preset\r\n                    )\r\n                  ) {\r\n                    const presetRes = valuesPresets[\r\n                      attributeRules.value.preset\r\n                    ](attr.value);\r\n\r\n                    if (presetRes.remove) {\r\n                      clearList.push(attr.name);\r\n                    }\r\n                  } else {\r\n                    clearList.push(attr.name);\r\n                  }\r\n                } else {\r\n                  // remove attribute if get empty object\r\n                  clearList.push(attr.name);\r\n                }\r\n              } else {\r\n                // remove attribute value by default\r\n                clearList.push(attr.name);\r\n              }\r\n            }\r\n          }\r\n\r\n          deleteList.forEach((attrName: string) =>\r\n            tag.removeAttribute(attrName)\r\n          );\r\n          clearList.forEach((attrName: string) =>\r\n            removeAttributeValue(tag, attrName)\r\n          );\r\n        } else {\r\n          const deleteList: string[] = [];\r\n\r\n          for (let i = 0; i < tag.attributes.length; i++) {\r\n            deleteList.push(tag.attributes[i].name);\r\n          }\r\n\r\n          deleteList.forEach((attrName: string) =>\r\n            tag.removeAttribute(attrName)\r\n          );\r\n        }\r\n      } else {\r\n        if (this.removeComments) {\r\n          removeComments(tag);\r\n        }\r\n\r\n        tag.insertAdjacentHTML('afterend', tag.innerHTML);\r\n        tag.remove();\r\n      }\r\n    });\r\n\r\n    return parser.stringify(wrapper);\r\n  }\r\n\r\n  /**\r\n   * Convert a string to {@link https://www.w3schools.com/html/html_entities.asp HTML Entities}.\r\n   */\r\n  public toHTMLEntities(str: string): string {\r\n    return str\r\n      .split('')\r\n      .map(n => `&#${n.charCodeAt(0)};`)\r\n      .join('');\r\n  }\r\n}\r\n\r\n/**\r\n * Set HTML custom parser\r\n */\r\nexport const setParser = (\r\n  customParser: HTMLParser | null | undefined\r\n): number => {\r\n  if (!customParser) {\r\n    console.error('customParser is null!');\r\n    return 0;\r\n  }\r\n\r\n  if (!Object.prototype.hasOwnProperty.call(customParser, 'parse')) {\r\n    console.error(\r\n      'cannot to find method \"parse\" in custom parser!',\r\n      customParser\r\n    );\r\n\r\n    return 0;\r\n  }\r\n\r\n  if (!Object.prototype.hasOwnProperty.call(customParser, 'stringify')) {\r\n    console.error(\r\n      'cannot to find method \"stringify\" in custom parser!',\r\n      customParser\r\n    );\r\n\r\n    return 0;\r\n  }\r\n\r\n  parser = customParser;\r\n  return 1;\r\n};\r\n\r\nexport default PurifyHTML;\r\n"],"names":["getDefaultParser","elem","string","removeAttributeValue","node","attributeName","removeComments","childIndex","getSortedByMaxChildDeep","markDeep","d","n","a","b","el","transformAttributes","rule","res","attr","safelyGetLink","str","deepClone","item","arrItem","key","copyConfig","config","valuesPresets","url","parser","PurifyHTML","allowedTags","acc","curr","wrapper","tag","name","tagConfig","deleteList","clearList","i","attributeRules","attrRule","attrName","setParser","customParser"],"mappings":"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"}