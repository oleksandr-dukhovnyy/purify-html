(function(o,l){typeof exports=="object"&&typeof module!="undefined"?l(exports):typeof define=="function"&&define.amd?define(["exports"],l):(o=typeof globalThis!="undefined"?globalThis:o||self,l(o.PurifyHTML={}))})(this,function(o){"use strict";var M=Object.defineProperty;var P=(o,l,c)=>l in o?M(o,l,{enumerable:!0,configurable:!0,writable:!0,value:c}):o[l]=c;var y=(o,l,c)=>(P(o,typeof l!="symbol"?l+"":l,c),c);const l=()=>{if(globalThis.DOMParser===void 0)throw`globalThis.DOMParser is not defined!
It seems that you use purify-html in node environment.
For node environment you need to add HTML parser by yourself.
See https://github.com/oleksandr-dukhovnyy/purify-html?tab=readme-ov-file#node-js for details.`;const e=new DOMParser().parseFromString("","text/html").querySelector("body");return{parse(t){return e.innerHTML=t,e},stringify(t){return t.innerHTML}}},c=(e,t)=>e.setAttribute(t,""),v=e=>{if("childNodes"in e)Array.from(e.childNodes).forEach(r=>{r.nodeType===8&&r.remove()});else return!1},j=(()=>{const e=(t,r=0)=>{if(t._d=r,t.children.length)[...t.children].forEach(u=>e(u,r+1));else return r};return t=>(e(t),[...t.querySelectorAll("*")].sort((r,u)=>u._d-r._d).map(r=>(delete r._d,r)))})(),L=e=>{const t=[];return Object.prototype.hasOwnProperty.call(e,"attributes")||(e.attributes=[]),e.attributes.forEach(r=>{switch(typeof r){case"string":t.push({name:r});break;case"object":t.push(r);break}}),e.attributes=t,e},p=e=>{try{return new URL(e)}catch(t){return null}},b=e=>{if(typeof e=="string")return e;if(Array.isArray(e))return e.map(t=>b(t));if(typeof e=="object"&&e!==null){const t={};for(const r in e)e[r]instanceof RegExp?t[r]=e[r]:typeof e[r]=="object"?t[r]=b(e[r]):t[r]=e[r];return t}return e},k=e=>e.map(b),g={"%correct-link%"(e){return{remove:p(e)===null}},"%http-link%"(e){const t=p(e);return{remove:t===null||t.protocol!=="http:"}},"%https-link%"(e){const t=p(e);return{remove:t===null||t.protocol!=="https:"}},"%ftp-link%"(e){const t=p(e);return{remove:t===null||t.protocol!=="ftp:"}},"%https-link-without-search-params%"(e){const t=p(e);return{remove:t===null||t.search!==""||t.protocol!=="https:"}},"%http-link-without-search-params%"(e){const t=p(e);return{remove:t===null||t.search!==""||t.protocol!=="http:"}},"%same-origin%"(e){const t=p(e);return{remove:t===null||globalThis.location.origin!==t.origin}}};function A(){console.warn(`[purify-html DEPRECATION ALERT]
Default presets is deprecated and will be removed in v2.0.0. See release notes for v1.5.4
https://github.com/oleksandr-dukhovnyy/purify-html/releases/tag/1.5.4`)}let h;class w{constructor(t=[]){y(this,"removeComments",!0);y(this,"allowedTags",{});y(this,"whiteList");h||(h=l()),this.allowedTags=k(t).reduce((r,u)=>{switch(typeof u){case"string":{u==="#comments"?this.removeComments=!1:r[u]=Object.assign(r[u]||{},{});break}case"object":r[u.name]=Object.assign(r[u.name]||{},L(u))}return r},{}),this.whiteList=Object.keys(this.allowedTags),this.sanitize.bind(this)}sanitize(t){const r=h.parse(t);return this.removeComments&&v(r),j(r).forEach(a=>{const O=a.tagName.toLowerCase();if(this.whiteList.includes(O)){const d=this.allowedTags[O];if(this.removeComments&&d.dontRemoveComments!==!0&&v(a),Object.prototype.hasOwnProperty.call(d,"attributes")&&d.attributes.length>0){const m=[],s=[];for(let f=0;f<a.attributes.length;f++){const n=a.attributes[f],i=d.attributes.find(T=>T.name===n.name);i?Object.prototype.hasOwnProperty.call(i,"value")&&(typeof i.value=="string"?n.value!==i.value&&s.push(n.name):typeof i.value=="function"?i.value(n.value)||s.push(n.name):i.value instanceof RegExp?i.value.test(n.value)||s.push(n.name):Array.isArray(i.value)?i.value.includes(n.value)||s.push(n.name):typeof i.value=="object"&&Object.prototype.hasOwnProperty.call(i.value,"preset")?(A(),Object.prototype.hasOwnProperty.call(g,i.value.preset)?g[i.value.preset](n.value).remove&&s.push(n.name):s.push(n.name)):s.push(n.name)):m.push(n.name)}m.forEach(f=>a.removeAttribute(f)),s.forEach(f=>c(a,f))}else{const m=[];for(let s=0;s<a.attributes.length;s++)m.push(a.attributes[s].name);m.forEach(s=>a.removeAttribute(s))}}else this.removeComments&&v(a),a.insertAdjacentHTML("afterend",a.innerHTML),a.remove()}),h.stringify(r)}toHTMLEntities(t){return t.split("").map(r=>`&#${r.charCodeAt(0)};`).join("")}}const C=e=>e?Object.prototype.hasOwnProperty.call(e,"parse")?Object.prototype.hasOwnProperty.call(e,"stringify")?(h=e,1):(console.error('cannot to find method "stringify" in custom parser!',e),0):(console.error('cannot to find method "parse" in custom parser!',e),0):(console.error("customParser is null!"),0);o.default=w,o.sanitizer=w,o.setParser=C,Object.defineProperties(o,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=index.umd.js.map
