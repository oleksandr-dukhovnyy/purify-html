{"version":3,"file":"index.es.js","sources":["../src/utils.ts","../src/core.ts"],"sourcesContent":["/** @module utils */\r\nimport {\r\n  AttributeRule,\r\n  TagRule,\r\n  presetTestResult,\r\n  MarkedElement,\r\n  HTMLParser,\r\n} from './types';\r\n\r\n/**\r\n * Setup default parser\r\n */\r\nexport const getDefaultParser = (): HTMLParser => {\r\n  if (globalThis.DOMParser === undefined) {\r\n    throw 'globalThis.DOMParser is not defined!\\nIt seems that you use purify-html in node environment.\\nFor node environment you need to add HTML parser by yourself.\\nSee https://github.com/oleksandr-dukhovnyy/purify-html?tab=readme-ov-file#node-js for details.';\r\n  }\r\n\r\n  const elem: Element = new DOMParser()\r\n    .parseFromString('', 'text/html')\r\n    .querySelector('body');\r\n\r\n  return {\r\n    parse(string: string): Element {\r\n      elem.innerHTML = string;\r\n      return elem;\r\n    },\r\n    stringify(elem: Element): string {\r\n      return elem.innerHTML;\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Remove attribute value, but dont remove attribute.\r\n */\r\nexport const removeAttributeValue = (node: Element, attributeName: string) =>\r\n  node.setAttribute(attributeName, '');\r\n\r\n/**\r\n * Remove all comments in childNodes.\r\n * Comments in child nodes are not removed\r\n *\r\n * @param {HTMLElement} node\r\n * @returns {undefined | false} undefined - ok, false - error\r\n */\r\nexport const removeComments = (node: Element): undefined | false => {\r\n  if ('childNodes' in node) {\r\n    // get stable array of childNodes\r\n    const childNodes = Array.from(node.childNodes);\r\n\r\n    // remove comments by nodeType\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\r\n    childNodes.forEach(el => {\r\n      if (el.nodeType === 8) el.remove();\r\n    });\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * @param {Element} node\r\n * @returns {Element[]} array of node childs sorted by child's max deep\r\n */\r\nexport const getSortedByMaxChildDeep = (() => {\r\n  const markDeep = (node: MarkedElement, d = 0): number | undefined => {\r\n    node._d = d;\r\n\r\n    if (node.children.length) {\r\n      [...node.children].forEach(n => markDeep(n, d + 1));\r\n    } else {\r\n      return d;\r\n    }\r\n  };\r\n\r\n  return (node: Element): Element[] => {\r\n    markDeep(node);\r\n\r\n    return [...node.querySelectorAll('*')]\r\n      .sort((a: MarkedElement, b: MarkedElement) => b._d - a._d)\r\n      .map((el: MarkedElement): Element => {\r\n        delete el._d;\r\n\r\n        return el;\r\n      });\r\n  };\r\n})();\r\n\r\n/**\r\n * Normalize a TagRule.\r\n */\r\nexport const transformAttributes = (rule: TagRule): TagRule => {\r\n  const res: AttributeRule[] = [];\r\n\r\n  if (!Object.prototype.hasOwnProperty.call(rule, 'attributes')) {\r\n    rule.attributes = [];\r\n  }\r\n\r\n  rule.attributes.forEach(attr => {\r\n    switch (typeof attr) {\r\n      case 'string':\r\n        res.push({ name: attr });\r\n        break;\r\n\r\n      case 'object':\r\n        res.push(attr);\r\n        break;\r\n    }\r\n  });\r\n\r\n  rule.attributes = res;\r\n\r\n  return rule;\r\n};\r\n\r\n/**\r\n * Safely get link with try...catch.\r\n */\r\nexport const safelyGetLink = (str: string): URL | null => {\r\n  try {\r\n    return new URL(str);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Add prefix by check\r\n *\r\n * @returns {string} if check returns true - prefix + str, else str\r\n */\r\nexport const addPrefix = (str: string, check: RegExp, prefix: string) =>\r\n  check.test(str) ? str : prefix + str;\r\n\r\n/**\r\n * Deep clone an object\r\n */\r\nexport const deepClone = <T>(item: T): T => {\r\n  if (typeof item === 'string') return item;\r\n  if (Array.isArray(item))\r\n    return item.map(arrItem => deepClone(arrItem)) as unknown as T;\r\n\r\n  if (typeof item === 'object' && item !== null) {\r\n    const res: Record<string, unknown> = {};\r\n\r\n    for (const key in item) {\r\n      if (item[key] instanceof RegExp) {\r\n        res[key] = item[key];\r\n      } else if (typeof item[key] === 'object') {\r\n        res[key] = deepClone(item[key]);\r\n      } else {\r\n        res[key] = item[key];\r\n      }\r\n    }\r\n\r\n    return res as T;\r\n  }\r\n\r\n  return item;\r\n};\r\n\r\n/**\r\n * Create clone of config for safe mutations\r\n *\r\n * @param {string[] | TagRule[]} config\r\n * @returns {string[] | TagRule[]} cloned config\r\n */\r\nexport const copyConfig = (\r\n  config: (string | TagRule)[]\r\n): (string | TagRule)[] => config.map(deepClone);\r\n\r\n/**\r\n * @typedef PresetCheckResult\r\n * @type {object}\r\n * @property {boolean} remove if true - attribute value is incorrect\r\n */\r\nexport const valuesPresets = {\r\n  /**\r\n   * Check is str a correct link\r\n   */\r\n  '%correct-link%'(str: string): presetTestResult {\r\n    return {\r\n      remove: safelyGetLink(str) === null,\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has HTTP protocol\r\n   */\r\n  '%http-link%'(str: string): presetTestResult {\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || url.protocol !== 'http:',\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has HTTPS protocol\r\n   */\r\n  '%https-link%'(str: string): presetTestResult {\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || url.protocol !== 'https:',\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has FTP protocol\r\n   */\r\n  '%ftp-link%'(str: string): presetTestResult {\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || url.protocol !== 'ftp:',\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has HTTPS protocol and does not have a params\r\n   *\r\n   * @function\r\n   */\r\n  '%https-link-without-search-params%'(str: string): presetTestResult {\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || url.search !== '' || url.protocol !== 'https:',\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has HTTP protocol and does not have a params\r\n   */\r\n  '%http-link-without-search-params%'(str: string): presetTestResult {\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || url.search !== '' || url.protocol !== 'http:',\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check is str a correct link and has same origin with current `location.origin`\r\n   */\r\n  '%same-origin%'(str: string): presetTestResult {\r\n    const url = safelyGetLink(str);\r\n\r\n    return {\r\n      remove: url === null || globalThis.location.origin !== url.origin,\r\n    };\r\n  },\r\n};\r\n\r\nexport function presetsDeprecationAlert() {\r\n  console.warn(\r\n    '[purify-html DEPRECATION ALERT]\\nDefault presets is deprecated and will be removed in v2.0.0. See release notes for v1.5.4\\nhttps://github.com/oleksandr-dukhovnyy/purify-html/releases/tag/1.5.4'\r\n  );\r\n}\r\n","/** @module core */\r\nimport { TagRule, AttributeRule, HTMLParser } from './types';\r\n\r\nimport {\r\n  removeAttributeValue,\r\n  transformAttributes,\r\n  valuesPresets,\r\n  getSortedByMaxChildDeep,\r\n  copyConfig,\r\n  removeComments,\r\n  getDefaultParser,\r\n  presetsDeprecationAlert,\r\n} from './utils';\r\n\r\nlet parser: HTMLParser | undefined;\r\n\r\n/**\r\n * Purify instance.\r\n */\r\nexport class PurifyHTML {\r\n  /**\r\n   * Create PurifyHTML instance\r\n   */\r\n\r\n  /**\r\n   * Is need to remove comments in root and in all nodes by default\r\n   */\r\n  protected removeComments = true;\r\n  protected allowedTags: { [key: string]: TagRule } = {};\r\n  protected whiteList: string[];\r\n\r\n  constructor(allowedTags: TagRule[] | string[] = []) {\r\n    // setup default parser\r\n    if (!parser) {\r\n      parser = getDefaultParser();\r\n    }\r\n\r\n    /**\r\n     * Copy and compile a rules\r\n     */\r\n    this.allowedTags = copyConfig(allowedTags).reduce(\r\n      (acc: object, curr: TagRule | string) => {\r\n        switch (typeof curr) {\r\n          case 'string': {\r\n            if (curr === '#comments') {\r\n              this.removeComments = false;\r\n            } else {\r\n              acc[curr] = Object.assign(acc[curr] || {}, {});\r\n            }\r\n\r\n            break;\r\n          }\r\n          case 'object':\r\n            acc[curr.name] = Object.assign(\r\n              acc[curr.name] || {},\r\n              transformAttributes(curr)\r\n            );\r\n        }\r\n\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n\r\n    /**\r\n     * Copy and compile a rules\r\n     */\r\n    this.whiteList = Object.keys(this.allowedTags);\r\n\r\n    /**\r\n     * Bind context for method sanitize\r\n     */\r\n    this.sanitize.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Sanitize a string.\r\n   * @param {string} str to needs to sanitize.\r\n   * @return {string} A string cleared according to the rules from this.allowedTags.\r\n   */\r\n  public sanitize(str: string): string {\r\n    // TODO: split to methods\r\n\r\n    const wrapper: Element = parser.parse(str);\r\n\r\n    if (this.removeComments) {\r\n      removeComments(wrapper);\r\n    }\r\n\r\n    const allItems: Element[] = getSortedByMaxChildDeep(wrapper);\r\n\r\n    allItems.forEach((tag: Element) => {\r\n      const name = tag.tagName.toLowerCase();\r\n\r\n      if (this.whiteList.includes(name)) {\r\n        const tagConfig: TagRule = this.allowedTags[name];\r\n\r\n        if (this.removeComments && tagConfig.dontRemoveComments !== true) {\r\n          removeComments(tag);\r\n        }\r\n\r\n        if (\r\n          Object.prototype.hasOwnProperty.call(tagConfig, 'attributes') &&\r\n          tagConfig.attributes.length > 0\r\n        ) {\r\n          const deleteList: string[] = [];\r\n          const clearList: string[] = [];\r\n\r\n          for (let i = 0; i < tag.attributes.length; i++) {\r\n            const attr: Attr = tag.attributes[i];\r\n\r\n            // get attribute rules\r\n            const attributeRules = tagConfig.attributes.find(\r\n              (attrRule: AttributeRule) => attrRule.name === attr.name\r\n            );\r\n\r\n            if (!attributeRules) {\r\n              // if rules not defined\r\n              deleteList.push(attr.name);\r\n            } else if (\r\n              Object.prototype.hasOwnProperty.call(attributeRules, 'value')\r\n            ) {\r\n              // if rules defined\r\n              if (typeof attributeRules.value === 'string') {\r\n                if (attr.value !== attributeRules.value) {\r\n                  // if rules is string\r\n                  clearList.push(attr.name);\r\n                }\r\n              } else if (typeof attributeRules.value === 'function') {\r\n                if (!attributeRules.value(attr.value)) {\r\n                  clearList.push(attr.name);\r\n                }\r\n              } else if (attributeRules.value instanceof RegExp) {\r\n                // if rules is regexp\r\n                if (!attributeRules.value.test(attr.value)) {\r\n                  clearList.push(attr.name);\r\n                }\r\n              } else if (Array.isArray(attributeRules.value)) {\r\n                // if rules is an array (an array of strings - valid values)\r\n                if (!attributeRules.value.includes(attr.value)) {\r\n                  clearList.push(attr.name);\r\n                }\r\n              } else if (typeof attributeRules.value === 'object') {\r\n                if (\r\n                  Object.prototype.hasOwnProperty.call(\r\n                    attributeRules.value,\r\n                    'preset'\r\n                  )\r\n                ) {\r\n                  // if rules is preset\r\n\r\n                  presetsDeprecationAlert();\r\n\r\n                  if (\r\n                    Object.prototype.hasOwnProperty.call(\r\n                      valuesPresets,\r\n                      attributeRules.value.preset\r\n                    )\r\n                  ) {\r\n                    const presetRes = valuesPresets[\r\n                      attributeRules.value.preset\r\n                    ](attr.value);\r\n\r\n                    if (presetRes.remove) {\r\n                      clearList.push(attr.name);\r\n                    }\r\n                  } else {\r\n                    clearList.push(attr.name);\r\n                  }\r\n                } else {\r\n                  // remove attribute if get empty object\r\n                  clearList.push(attr.name);\r\n                }\r\n              } else {\r\n                // remove attribute value by default\r\n                clearList.push(attr.name);\r\n              }\r\n            }\r\n          }\r\n\r\n          deleteList.forEach((attrName: string) =>\r\n            tag.removeAttribute(attrName)\r\n          );\r\n          clearList.forEach((attrName: string) =>\r\n            removeAttributeValue(tag, attrName)\r\n          );\r\n        } else {\r\n          const deleteList: string[] = [];\r\n\r\n          for (let i = 0; i < tag.attributes.length; i++) {\r\n            deleteList.push(tag.attributes[i].name);\r\n          }\r\n\r\n          deleteList.forEach((attrName: string) =>\r\n            tag.removeAttribute(attrName)\r\n          );\r\n        }\r\n      } else {\r\n        if (this.removeComments) {\r\n          removeComments(tag);\r\n        }\r\n\r\n        tag.insertAdjacentHTML('afterend', tag.innerHTML);\r\n        tag.remove();\r\n      }\r\n    });\r\n\r\n    return parser.stringify(wrapper);\r\n  }\r\n\r\n  /**\r\n   * Convert a string to {@link https://www.w3schools.com/html/html_entities.asp HTML Entities}.\r\n   */\r\n  public toHTMLEntities(str: string): string {\r\n    return str\r\n      .split('')\r\n      .map(n => `&#${n.charCodeAt(0)};`)\r\n      .join('');\r\n  }\r\n}\r\n\r\n/**\r\n * Set HTML custom parser\r\n */\r\nexport const setParser = (\r\n  customParser: HTMLParser | null | undefined\r\n): number => {\r\n  if (!customParser) {\r\n    console.error('customParser is null!');\r\n    return 0;\r\n  }\r\n\r\n  if (!Object.prototype.hasOwnProperty.call(customParser, 'parse')) {\r\n    console.error(\r\n      'cannot to find method \"parse\" in custom parser!',\r\n      customParser\r\n    );\r\n\r\n    return 0;\r\n  }\r\n\r\n  if (!Object.prototype.hasOwnProperty.call(customParser, 'stringify')) {\r\n    console.error(\r\n      'cannot to find method \"stringify\" in custom parser!',\r\n      customParser\r\n    );\r\n\r\n    return 0;\r\n  }\r\n\r\n  parser = customParser;\r\n  return 1;\r\n};\r\n\r\nexport default PurifyHTML;\r\n"],"names":["getDefaultParser","elem","string","removeAttributeValue","node","attributeName","removeComments","el","getSortedByMaxChildDeep","markDeep","d","n","a","b","transformAttributes","rule","res","attr","safelyGetLink","str","e","deepClone","item","arrItem","key","copyConfig","config","valuesPresets","url","presetsDeprecationAlert","parser","PurifyHTML","allowedTags","__publicField","acc","curr","wrapper","tag","name","tagConfig","deleteList","clearList","i","attributeRules","attrRule","attrName","setParser","customParser"],"mappings":"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"}